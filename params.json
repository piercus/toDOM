{"name":"toDOM","tagline":"JSON to DOM, JSON to HTML, fast, powerful and lightweight DOM/HTML generation from JSON","google":"","body":"##Â toDOM  - fast and lightweight DOM generation\r\n-----------------------------------------------\r\n\r\n\r\n### You :\r\n* Do not like `<html>`\r\n* Love javascript\r\n* Want performance\r\n* Are tired of document.createElement \r\n\r\nHere is toDOM :\r\n``` javascript\r\n\r\nvar toDOM = sand.require(\"toDOM/toDOM\");\r\n\r\nvar scope = {};\r\n\r\nvar el = toDOM({\r\n\tattr : { className : 'my_class' },\r\n\tevents : {\r\n\t\tclick : function() {\r\n\t\t\tconsole.log('div clicked');\r\n\t  },\r\n  },\r\n  children : [{\r\n  \t\ttag : 'p',\r\n  \t\tlabel : 'myParagraph',\r\n  \t\tinnerHTML : 'Hello',\r\n\t    style : {\r\n\t    \tbackgroundColor : '#000'\r\n\t    }  \r\n  }]\r\n}, scope);\r\n\r\ndocument.body.appendChild(el);\r\n\r\n```\r\n\r\nWill create the following : \r\n\r\n``` html \r\n<body>\r\n\t<div class=\"my_class\">\r\n\t\t<p style=\"background-color:#000\">\r\n\t\t\tHello\r\n\t\t</p>\r\n\t</div>\r\n</body>\r\n```\r\n\r\nWith a console.log on click and a reference of the `<p>` DOM element in scope : \r\n\r\n```javascript\r\n\tscope.myParagraph //  domElement\r\n\tscope.myParagraph.innerHTML // 'Hello'\r\n```\r\n\r\n\r\n### Usage in object oriented javascript : \r\n\r\n```javascript\r\n\r\nvar View = function(o) {\r\n\tif (o.domDescription) {\r\n\t  this.buildEl(o.domDescription);\r\n\t}\r\n};\r\n\r\nView.prototype = {\r\n\tbuildEl : function(domDescription) {\r\n\t\tthis.el = toDOM(domDescription, this);\r\n  }\r\n}\r\n\r\nvar myView = new View({\r\n\tdomDescription : {\r\n\t\ttag : 'p',\r\n\t\tchildren : [\r\n\t\t\t{\r\n\t\t\t\tlabel : 'helloEl',\r\n\t\t\t\tinnerHTML : 'hello!'\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n});\r\n\r\nmyView.el // DOM element\r\nmyView.helloEl // DOM element\r\nmyView.helloEl.innerHTML // 'hello!'\r\n\r\n```\r\n## Installation\r\n\r\n### With NPM\r\n\r\n    $ npm install toDOM\r\n\r\nin your script add\r\n\r\n```javascript \r\n    require(\"toDOM\");\r\n```\r\n\r\n### Client-side\r\n\r\n```html \r\n    <script src=\"path/to/toDOM.merged.js\">\r\n```\r\nor\r\n\r\n```html\r\n    <script src=\"path/to/toDOM.min.js\">\r\n```\r\n\r\n## Basic Usage\r\n\t You can use sandjs synthax to write both client and server-side code.\r\n\t see [sandjs](http://github.com/fjs/sandjs) for more informations on sand.js.\r\n\r\n```javascript \r\n\t var S = sand.require(\"Seed/Seed\", function(r){\r\n\t\t var S = r.Seed;\r\n\t\t /* code */\r\n\t });\r\n```\r\n\t see [How to require a sandjs module](http://github.com/piercus/sandjs/blob/How-to-require-a-sandjs-module.md) for more ways to require toDOM\r\n\r\n### Also :\r\n\r\n* Default tag is 'div' \r\n* toDOM is defined with [sandjs](https://github.com/piercus/sandjs) module manager, so you can use it with requirejs if you want to\r\n\r\n### Contribute\r\n## Tests\r\n\r\nrun tests\r\n\r\n    $ npm test\r\n\r\ntest uses sandcli and run on server-side with vowsjs\r\n[sandcli](http://github.com/piercus/sandcli) provides a test command\r\n\r\n## Documentation\r\n\r\nBy now documentation is inside the code and uses JSDoc synthax.\r\n\r\n## TO DO\r\n\r\n*   Make tests on both client-side and server-side\r\n*   Make a demo\r\n*   Debug toDjson\r\n*   Compile documentation form JSDoc\r\n*   Make performances tests\r\n   \r\n## Contribute\r\n\r\nAdd an issue if you find bugs or please\r\n\r\n*   Fork me\r\n*   Add your tests\r\n*   Make your contribution\r\n*   Pass all the tests \r\n*   Add a pull request\r\n\r\n### Authors \r\n*   [Sam Ton That](https://github.com/KspR)\r\n*   [Pierre Cole](https://github.com/piercus)\r\n*   [Cyril Agosta](https://github.com/cagosta)\r\n*   Ilamvazudhi Vijayarangam\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}